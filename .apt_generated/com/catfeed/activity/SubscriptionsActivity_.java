//
// DO NOT EDIT THIS FILE, IT HAS BEEN GENERATED USING AndroidAnnotations.
//


package com.catfeed.activity;

import java.util.Observable;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.util.Log;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup.LayoutParams;
import com.catfeed.CatFeedApp;
import com.catfeed.R.layout;
import com.catfeed.RssFeeder_;
import com.catfeed.db.Repository_;
import com.googlecode.androidannotations.api.BackgroundExecutor;

public final class SubscriptionsActivity_
    extends SubscriptionsActivity
{

    private Handler handler_ = new Handler();

    @Override
    public void onCreate(Bundle savedInstanceState) {
        init_(savedInstanceState);
        super.onCreate(savedInstanceState);
        setContentView(layout.subscriptions_activity);
    }

    private void init_(Bundle savedInstanceState) {
        application = ((CatFeedApp) this.getApplication());
        repository = Repository_.getInstance_(this);
        rss = RssFeeder_.getInstance_(this);
    }

    private void afterSetContentView_() {
        ((Repository_) repository).afterSetContentView_();
        ((RssFeeder_) rss).afterSetContentView_();
    }

    @Override
    public void setContentView(int layoutResID) {
        super.setContentView(layoutResID);
        afterSetContentView_();
    }

    @Override
    public void setContentView(View view, LayoutParams params) {
        super.setContentView(view, params);
        afterSetContentView_();
    }

    @Override
    public void setContentView(View view) {
        super.setContentView(view);
        afterSetContentView_();
    }

    public static SubscriptionsActivity_.IntentBuilder_ intent(Context context) {
        return new SubscriptionsActivity_.IntentBuilder_(context);
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        MenuInflater menuInflater = getMenuInflater();
        menuInflater.inflate(com.catfeed.R.menu.subscription, menu);
        return super.onCreateOptionsMenu(menu);
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        boolean handled = super.onOptionsItemSelected(item);
        if (handled) {
            return true;
        }
        int itemId_ = item.getItemId();
        if (itemId_ == com.catfeed.R.id.menuitem_refresh) {
            refreshMenuItemClicked();
            return true;
        }
        if (itemId_ == com.catfeed.R.id.menuitem_add) {
            editMenuItemClicked();
            return true;
        }
        return false;
    }

    @Override
    public void update(final Observable observable, final Object arg1) {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                try {
                    SubscriptionsActivity_.super.update(observable, arg1);
                } catch (RuntimeException e) {
                    Log.e("SubscriptionsActivity_", "A runtime exception was thrown while executing code in a runnable", e);
                }
            }

        }
        );
    }

    @Override
    public void fetchFlickrImage(final Context context, final Long id, final String search) {
        BackgroundExecutor.execute(new Runnable() {


            @Override
            public void run() {
                try {
                    SubscriptionsActivity_.super.fetchFlickrImage(context, id, search);
                } catch (RuntimeException e) {
                    Log.e("SubscriptionsActivity_", "A runtime exception was thrown while executing code in a runnable", e);
                }
            }

        }
        );
    }

    public static class IntentBuilder_ {

        private Context context_;
        private final Intent intent_;

        public IntentBuilder_(Context context) {
            context_ = context;
            intent_ = new Intent(context, SubscriptionsActivity_.class);
        }

        public Intent get() {
            return intent_;
        }

        public SubscriptionsActivity_.IntentBuilder_ flags(int flags) {
            intent_.setFlags(flags);
            return this;
        }

        public void start() {
            context_.startActivity(intent_);
        }

        public void startForResult(int requestCode) {
            if (context_ instanceof Activity) {
                ((Activity) context_).startActivityForResult(intent_, requestCode);
            } else {
                context_.startActivity(intent_);
            }
        }

    }

}
