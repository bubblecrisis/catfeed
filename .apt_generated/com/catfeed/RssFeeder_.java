//
// DO NOT EDIT THIS FILE, IT HAS BEEN GENERATED USING AndroidAnnotations.
//


package com.catfeed;

import android.app.Activity;
import android.content.Context;
import android.os.Handler;
import android.util.Log;
import android.view.View;
import com.catfeed.db.Repository_;
import com.googlecode.androidannotations.api.BackgroundExecutor;
import utils.Progress;

public final class RssFeeder_
    extends RssFeeder
{

    private Context context_;
    private Handler handler_ = new Handler();

    private RssFeeder_(Context context) {
        context_ = context;
        init_();
    }

    public void afterSetContentView_() {
        if (!(context_ instanceof Activity)) {
            return ;
        }
        ((Repository_) repository).afterSetContentView_();
        ((WebPageFeeder_) webPageFeeder).afterSetContentView_();
    }

    /**
     * You should check that context is an activity before calling this method
     * 
     */
    public View findViewById(int id) {
        Activity activity_ = ((Activity) context_);
        return activity_.findViewById(id);
    }

    @SuppressWarnings("all")
    private void init_() {
        if (context_ instanceof Activity) {
            Activity activity = ((Activity) context_);
            application = ((CatFeedApp) activity.getApplication());
        }
        if (context_ instanceof Activity) {
            activity = ((Activity) context_);
        }
        context = context_;
        repository = Repository_.getInstance_(context_);
        webPageFeeder = WebPageFeeder_.getInstance_(context_);
    }

    public static RssFeeder_ getInstance_(Context context) {
        return new RssFeeder_(context);
    }

    public void rebind(Context context) {
        context_ = context;
        init_();
    }

    @Override
    public void finish(final Progress progress) {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                try {
                    RssFeeder_.super.finish(progress);
                } catch (RuntimeException e) {
                    Log.e("RssFeeder_", "A runtime exception was thrown while executing code in a runnable", e);
                }
            }

        }
        );
    }

    @Override
    public void promptNewSubscription(final String defaultUrl, final String message) {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                try {
                    RssFeeder_.super.promptNewSubscription(defaultUrl, message);
                } catch (RuntimeException e) {
                    Log.e("RssFeeder_", "A runtime exception was thrown while executing code in a runnable", e);
                }
            }

        }
        );
    }

    @Override
    public void rssFetchError(final String title, final String message) {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                try {
                    RssFeeder_.super.rssFetchError(title, message);
                } catch (RuntimeException e) {
                    Log.e("RssFeeder_", "A runtime exception was thrown while executing code in a runnable", e);
                }
            }

        }
        );
    }

    @Override
    public void subscribe(final Progress progress, final String feedUrl) {
        BackgroundExecutor.execute(new Runnable() {


            @Override
            public void run() {
                try {
                    RssFeeder_.super.subscribe(progress, feedUrl);
                } catch (RuntimeException e) {
                    Log.e("RssFeeder_", "A runtime exception was thrown while executing code in a runnable", e);
                }
            }

        }
        );
    }

    @Override
    public void refresh(final Progress progress, final String[] feedUrl) {
        BackgroundExecutor.execute(new Runnable() {


            @Override
            public void run() {
                try {
                    RssFeeder_.super.refresh(progress, feedUrl);
                } catch (RuntimeException e) {
                    Log.e("RssFeeder_", "A runtime exception was thrown while executing code in a runnable", e);
                }
            }

        }
        );
    }

    @Override
    public void downloadIcon(final Long subscriptionId, final String url) {
        BackgroundExecutor.execute(new Runnable() {


            @Override
            public void run() {
                try {
                    RssFeeder_.super.downloadIcon(subscriptionId, url);
                } catch (RuntimeException e) {
                    Log.e("RssFeeder_", "A runtime exception was thrown while executing code in a runnable", e);
                }
            }

        }
        );
    }

}
